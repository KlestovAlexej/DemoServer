// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModelsOptimized
{
    public partial class ProcessingDbContextModel
    {
        partial void Initialize()
        {
            var demoobjectx = DemoobjectxEntityType.Create(this);
            var pdChangeTracker = PdChangeTrackerEntityType.Create(this);
            var pdDemoObject = PdDemoObjectEntityType.Create(this);
            var pdSystemLog = PdSystemLogEntityType.Create(this);
            var pdTablePartition = PdTablePartitionEntityType.Create(this);
            var systemsetting = SystemsettingEntityType.Create(this);

            DemoobjectxEntityType.CreateAnnotations(demoobjectx);
            PdChangeTrackerEntityType.CreateAnnotations(pdChangeTracker);
            PdDemoObjectEntityType.CreateAnnotations(pdDemoObject);
            PdSystemLogEntityType.CreateAnnotations(pdSystemLog);
            PdTablePartitionEntityType.CreateAnnotations(pdTablePartition);
            SystemsettingEntityType.CreateAnnotations(systemsetting);

            var sequences = new SortedDictionary<(string, string), ISequence>();
            var sequence_changetracker = new RuntimeSequence(
                "sequence_changetracker",
                this,
                typeof(long));

            sequences[("sequence_changetracker", null)] = sequence_changetracker;

            var sequence_demoobject = new RuntimeSequence(
                "sequence_demoobject",
                this,
                typeof(long));

            sequences[("sequence_demoobject", null)] = sequence_demoobject;

            var sequence_demoobjectx = new RuntimeSequence(
                "sequence_demoobjectx",
                this,
                typeof(long));

            sequences[("sequence_demoobjectx", null)] = sequence_demoobjectx;

            var sequence_systemlog = new RuntimeSequence(
                "sequence_systemlog",
                this,
                typeof(long));

            sequences[("sequence_systemlog", null)] = sequence_systemlog;

            var sequence_tablepartition = new RuntimeSequence(
                "sequence_tablepartition",
                this,
                typeof(long));

            sequences[("sequence_tablepartition", null)] = sequence_tablepartition;

            AddAnnotation("Relational:Sequences", sequences);
            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var demoobjectx = FindEntityType("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Demoobjectx")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            demoobjectx.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase = new TableBase("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Demoobjectx", null, relationalModel);
            var createdateColumnBase = new ColumnBase<ColumnMappingBase>("createdate", "timestamp with time zone", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("createdate", createdateColumnBase);
            var enabledColumnBase = new ColumnBase<ColumnMappingBase>("enabled", "boolean", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("enabled", enabledColumnBase);
            var groupColumnBase = new ColumnBase<ColumnMappingBase>("group", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("group", groupColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("id", idColumnBase);
            var key1ColumnBase = new ColumnBase<ColumnMappingBase>("key1", "uuid", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("key1", key1ColumnBase);
            var key2ColumnBase = new ColumnBase<ColumnMappingBase>("key2", "character varying(10)", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("key2", key2ColumnBase);
            var modificationdateColumnBase = new ColumnBase<ColumnMappingBase>("modificationdate", "timestamp with time zone", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("modificationdate", modificationdateColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(1024)", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("name", nameColumnBase);
            var revisionColumnBase = new ColumnBase<ColumnMappingBase>("revision", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.Columns.Add("revision", revisionColumnBase);
            relationalModel.DefaultTables.Add("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Demoobjectx", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase = new TableMappingBase<ColumnMappingBase>(demoobjectx, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase, true);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxTableBase.AddTypeMapping(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase, false);
            defaultTableMappings.Add(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, demoobjectx.FindProperty("Id")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdateColumnBase, demoobjectx.FindProperty("Createdate")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enabledColumnBase, demoobjectx.FindProperty("Enabled")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)groupColumnBase, demoobjectx.FindProperty("Group")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)key1ColumnBase, demoobjectx.FindProperty("Key1")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)key2ColumnBase, demoobjectx.FindProperty("Key2")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modificationdateColumnBase, demoobjectx.FindProperty("Modificationdate")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, demoobjectx.FindProperty("Name")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)revisionColumnBase, demoobjectx.FindProperty("Revision")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsDemoobjectxMappingBase);

            var tableMappings = new List<TableMapping>();
            demoobjectx.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var demoobjectxTable = new Table("demoobjectx", null, relationalModel);
            var idColumn = new Column("id", "bigint", demoobjectxTable);
            demoobjectxTable.Columns.Add("id", idColumn);
            var createdateColumn = new Column("createdate", "timestamp with time zone", demoobjectxTable);
            demoobjectxTable.Columns.Add("createdate", createdateColumn);
            var enabledColumn = new Column("enabled", "boolean", demoobjectxTable);
            demoobjectxTable.Columns.Add("enabled", enabledColumn);
            var groupColumn = new Column("group", "bigint", demoobjectxTable);
            demoobjectxTable.Columns.Add("group", groupColumn);
            var key1Column = new Column("key1", "uuid", demoobjectxTable);
            demoobjectxTable.Columns.Add("key1", key1Column);
            var key2Column = new Column("key2", "character varying(10)", demoobjectxTable);
            demoobjectxTable.Columns.Add("key2", key2Column);
            var modificationdateColumn = new Column("modificationdate", "timestamp with time zone", demoobjectxTable);
            demoobjectxTable.Columns.Add("modificationdate", modificationdateColumn);
            var nameColumn = new Column("name", "character varying(1024)", demoobjectxTable);
            demoobjectxTable.Columns.Add("name", nameColumn);
            var revisionColumn = new Column("revision", "bigint", demoobjectxTable);
            demoobjectxTable.Columns.Add("revision", revisionColumn);
            var pK_demoobjectx = new UniqueConstraint("PK_demoobjectx", demoobjectxTable, new[] { idColumn });
            demoobjectxTable.PrimaryKey = pK_demoobjectx;
            var pK_demoobjectxUc = RelationalModel.GetKey(this,
                "ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Demoobjectx",
                new[] { "Id" });
            pK_demoobjectx.MappedKeys.Add(pK_demoobjectxUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_demoobjectxUc).Add(pK_demoobjectx);
            demoobjectxTable.UniqueConstraints.Add("PK_demoobjectx", pK_demoobjectx);
            relationalModel.Tables.Add(("demoobjectx", null), demoobjectxTable);
            var demoobjectxTableMapping = new TableMapping(demoobjectx, demoobjectxTable, true);
            demoobjectxTable.AddTypeMapping(demoobjectxTableMapping, false);
            tableMappings.Add(demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, demoobjectx.FindProperty("Id")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(createdateColumn, demoobjectx.FindProperty("Createdate")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(enabledColumn, demoobjectx.FindProperty("Enabled")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(groupColumn, demoobjectx.FindProperty("Group")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(key1Column, demoobjectx.FindProperty("Key1")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(key2Column, demoobjectx.FindProperty("Key2")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(modificationdateColumn, demoobjectx.FindProperty("Modificationdate")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, demoobjectx.FindProperty("Name")!, demoobjectxTableMapping);
            RelationalModel.CreateColumnMapping(revisionColumn, demoobjectx.FindProperty("Revision")!, demoobjectxTableMapping);

            var pdChangeTracker = FindEntityType("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdChangeTracker")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            pdChangeTracker.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerTableBase = new TableBase("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdChangeTracker", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerTableBase.Columns.Add("id", idColumnBase0);
            relationalModel.DefaultTables.Add("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdChangeTracker", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerTableBase);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerMappingBase = new TableMappingBase<ColumnMappingBase>(pdChangeTracker, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerTableBase, true);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerTableBase.AddTypeMapping(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerMappingBase, false);
            defaultTableMappings0.Add(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, pdChangeTracker.FindProperty("Id")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdChangeTrackerMappingBase);

            var tableMappings0 = new List<TableMapping>();
            pdChangeTracker.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var changetrackerTable = new Table("changetracker", null, relationalModel);
            var idColumn0 = new Column("id", "bigint", changetrackerTable);
            changetrackerTable.Columns.Add("id", idColumn0);
            var pK_changetracker = new UniqueConstraint("PK_changetracker", changetrackerTable, new[] { idColumn0 });
            changetrackerTable.PrimaryKey = pK_changetracker;
            var pK_changetrackerUc = RelationalModel.GetKey(this,
                "ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdChangeTracker",
                new[] { "Id" });
            pK_changetracker.MappedKeys.Add(pK_changetrackerUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_changetrackerUc).Add(pK_changetracker);
            changetrackerTable.UniqueConstraints.Add("PK_changetracker", pK_changetracker);
            relationalModel.Tables.Add(("changetracker", null), changetrackerTable);
            var changetrackerTableMapping = new TableMapping(pdChangeTracker, changetrackerTable, true);
            changetrackerTable.AddTypeMapping(changetrackerTableMapping, false);
            tableMappings0.Add(changetrackerTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, pdChangeTracker.FindProperty("Id")!, changetrackerTableMapping);

            var pdDemoObject = FindEntityType("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdDemoObject")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            pdDemoObject.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase = new TableBase("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdDemoObject", null, relationalModel);
            var createdateColumnBase0 = new ColumnBase<ColumnMappingBase>("createdate", "timestamp without time zone", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.Columns.Add("createdate", createdateColumnBase0);
            var enabledColumnBase0 = new ColumnBase<ColumnMappingBase>("enabled", "boolean", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.Columns.Add("enabled", enabledColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.Columns.Add("id", idColumnBase1);
            var modificationdateColumnBase0 = new ColumnBase<ColumnMappingBase>("modificationdate", "timestamp without time zone", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.Columns.Add("modificationdate", modificationdateColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(1024)", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.Columns.Add("name", nameColumnBase0);
            var revisionColumnBase0 = new ColumnBase<ColumnMappingBase>("revision", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.Columns.Add("revision", revisionColumnBase0);
            relationalModel.DefaultTables.Add("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdDemoObject", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase = new TableMappingBase<ColumnMappingBase>(pdDemoObject, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase, true);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectTableBase.AddTypeMapping(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase, false);
            defaultTableMappings1.Add(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, pdDemoObject.FindProperty("Id")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdateColumnBase0, pdDemoObject.FindProperty("Createdate")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enabledColumnBase0, pdDemoObject.FindProperty("Enabled")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modificationdateColumnBase0, pdDemoObject.FindProperty("Modificationdate")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, pdDemoObject.FindProperty("Name")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)revisionColumnBase0, pdDemoObject.FindProperty("Revision")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdDemoObjectMappingBase);

            var tableMappings1 = new List<TableMapping>();
            pdDemoObject.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var demoobjectTable = new Table("demoobject", null, relationalModel);
            var idColumn1 = new Column("id", "bigint", demoobjectTable);
            demoobjectTable.Columns.Add("id", idColumn1);
            var createdateColumn0 = new Column("createdate", "timestamp without time zone", demoobjectTable);
            demoobjectTable.Columns.Add("createdate", createdateColumn0);
            var enabledColumn0 = new Column("enabled", "boolean", demoobjectTable);
            demoobjectTable.Columns.Add("enabled", enabledColumn0);
            var modificationdateColumn0 = new Column("modificationdate", "timestamp without time zone", demoobjectTable);
            demoobjectTable.Columns.Add("modificationdate", modificationdateColumn0);
            var nameColumn0 = new Column("name", "character varying(1024)", demoobjectTable);
            demoobjectTable.Columns.Add("name", nameColumn0);
            var revisionColumn0 = new Column("revision", "bigint", demoobjectTable);
            demoobjectTable.Columns.Add("revision", revisionColumn0);
            var pK_demoobject = new UniqueConstraint("PK_demoobject", demoobjectTable, new[] { idColumn1 });
            demoobjectTable.PrimaryKey = pK_demoobject;
            var pK_demoobjectUc = RelationalModel.GetKey(this,
                "ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdDemoObject",
                new[] { "Id" });
            pK_demoobject.MappedKeys.Add(pK_demoobjectUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_demoobjectUc).Add(pK_demoobject);
            demoobjectTable.UniqueConstraints.Add("PK_demoobject", pK_demoobject);
            relationalModel.Tables.Add(("demoobject", null), demoobjectTable);
            var demoobjectTableMapping = new TableMapping(pdDemoObject, demoobjectTable, true);
            demoobjectTable.AddTypeMapping(demoobjectTableMapping, false);
            tableMappings1.Add(demoobjectTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, pdDemoObject.FindProperty("Id")!, demoobjectTableMapping);
            RelationalModel.CreateColumnMapping(createdateColumn0, pdDemoObject.FindProperty("Createdate")!, demoobjectTableMapping);
            RelationalModel.CreateColumnMapping(enabledColumn0, pdDemoObject.FindProperty("Enabled")!, demoobjectTableMapping);
            RelationalModel.CreateColumnMapping(modificationdateColumn0, pdDemoObject.FindProperty("Modificationdate")!, demoobjectTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, pdDemoObject.FindProperty("Name")!, demoobjectTableMapping);
            RelationalModel.CreateColumnMapping(revisionColumn0, pdDemoObject.FindProperty("Revision")!, demoobjectTableMapping);

            var pdSystemLog = FindEntityType("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdSystemLog")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            pdSystemLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase = new TableBase("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdSystemLog", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("code", "integer", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.Columns.Add("code", codeColumnBase);
            var createdateColumnBase1 = new ColumnBase<ColumnMappingBase>("createdate", "timestamp with time zone", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.Columns.Add("createdate", createdateColumnBase1);
            var dataColumnBase = new ColumnBase<ColumnMappingBase>("data", "text", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.Columns.Add("data", dataColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.Columns.Add("id", idColumnBase2);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("message", "character varying(1024)", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.Columns.Add("message", messageColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "integer", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.Columns.Add("type", typeColumnBase);
            relationalModel.DefaultTables.Add("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdSystemLog", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase = new TableMappingBase<ColumnMappingBase>(pdSystemLog, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase, true);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogTableBase.AddTypeMapping(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase, false);
            defaultTableMappings2.Add(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, pdSystemLog.FindProperty("Id")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, pdSystemLog.FindProperty("Code")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdateColumnBase1, pdSystemLog.FindProperty("Createdate")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataColumnBase, pdSystemLog.FindProperty("Data")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, pdSystemLog.FindProperty("Message")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, pdSystemLog.FindProperty("Type")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdSystemLogMappingBase);

            var tableMappings2 = new List<TableMapping>();
            pdSystemLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var systemlogTable = new Table("systemlog", null, relationalModel);
            var idColumn2 = new Column("id", "bigint", systemlogTable);
            systemlogTable.Columns.Add("id", idColumn2);
            var codeColumn = new Column("code", "integer", systemlogTable);
            systemlogTable.Columns.Add("code", codeColumn);
            var createdateColumn1 = new Column("createdate", "timestamp with time zone", systemlogTable);
            systemlogTable.Columns.Add("createdate", createdateColumn1);
            var dataColumn = new Column("data", "text", systemlogTable);
            systemlogTable.Columns.Add("data", dataColumn);
            var messageColumn = new Column("message", "character varying(1024)", systemlogTable);
            systemlogTable.Columns.Add("message", messageColumn);
            var typeColumn = new Column("type", "integer", systemlogTable);
            systemlogTable.Columns.Add("type", typeColumn);
            var pK_systemlog = new UniqueConstraint("PK_systemlog", systemlogTable, new[] { idColumn2 });
            systemlogTable.PrimaryKey = pK_systemlog;
            var pK_systemlogUc = RelationalModel.GetKey(this,
                "ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdSystemLog",
                new[] { "Id" });
            pK_systemlog.MappedKeys.Add(pK_systemlogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_systemlogUc).Add(pK_systemlog);
            systemlogTable.UniqueConstraints.Add("PK_systemlog", pK_systemlog);
            relationalModel.Tables.Add(("systemlog", null), systemlogTable);
            var systemlogTableMapping = new TableMapping(pdSystemLog, systemlogTable, true);
            systemlogTable.AddTypeMapping(systemlogTableMapping, false);
            tableMappings2.Add(systemlogTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, pdSystemLog.FindProperty("Id")!, systemlogTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, pdSystemLog.FindProperty("Code")!, systemlogTableMapping);
            RelationalModel.CreateColumnMapping(createdateColumn1, pdSystemLog.FindProperty("Createdate")!, systemlogTableMapping);
            RelationalModel.CreateColumnMapping(dataColumn, pdSystemLog.FindProperty("Data")!, systemlogTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, pdSystemLog.FindProperty("Message")!, systemlogTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, pdSystemLog.FindProperty("Type")!, systemlogTableMapping);

            var pdTablePartition = FindEntityType("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdTablePartition")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            pdTablePartition.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase = new TableBase("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdTablePartition", null, relationalModel);
            var createdateColumnBase2 = new ColumnBase<ColumnMappingBase>("createdate", "timestamp with time zone", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("createdate", createdateColumnBase2);
            var dayColumnBase = new ColumnBase<ColumnMappingBase>("day", "date", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("day", dayColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("id", idColumnBase3);
            var maxnotincludegroupidColumnBase = new ColumnBase<ColumnMappingBase>("maxnotincludegroupid", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("maxnotincludegroupid", maxnotincludegroupidColumnBase);
            var maxnotincludeidColumnBase = new ColumnBase<ColumnMappingBase>("maxnotincludeid", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("maxnotincludeid", maxnotincludeidColumnBase);
            var mingroupidColumnBase = new ColumnBase<ColumnMappingBase>("mingroupid", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("mingroupid", mingroupidColumnBase);
            var minidColumnBase = new ColumnBase<ColumnMappingBase>("minid", "bigint", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("minid", minidColumnBase);
            var partitionnameColumnBase = new ColumnBase<ColumnMappingBase>("partitionname", "character varying", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("partitionname", partitionnameColumnBase);
            var tablenameColumnBase = new ColumnBase<ColumnMappingBase>("tablename", "character varying", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.Columns.Add("tablename", tablenameColumnBase);
            relationalModel.DefaultTables.Add("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdTablePartition", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase = new TableMappingBase<ColumnMappingBase>(pdTablePartition, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase, true);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionTableBase.AddTypeMapping(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase, false);
            defaultTableMappings3.Add(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, pdTablePartition.FindProperty("Id")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdateColumnBase2, pdTablePartition.FindProperty("Createdate")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dayColumnBase, pdTablePartition.FindProperty("Day")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxnotincludegroupidColumnBase, pdTablePartition.FindProperty("Maxnotincludegroupid")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxnotincludeidColumnBase, pdTablePartition.FindProperty("Maxnotincludeid")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mingroupidColumnBase, pdTablePartition.FindProperty("Mingroupid")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minidColumnBase, pdTablePartition.FindProperty("Minid")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)partitionnameColumnBase, pdTablePartition.FindProperty("Partitionname")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tablenameColumnBase, pdTablePartition.FindProperty("Tablename")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsPdTablePartitionMappingBase);

            var tableMappings3 = new List<TableMapping>();
            pdTablePartition.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var tablepartitionTable = new Table("tablepartition", null, relationalModel);
            var idColumn3 = new Column("id", "bigint", tablepartitionTable);
            tablepartitionTable.Columns.Add("id", idColumn3);
            var createdateColumn2 = new Column("createdate", "timestamp with time zone", tablepartitionTable);
            tablepartitionTable.Columns.Add("createdate", createdateColumn2);
            var dayColumn = new Column("day", "date", tablepartitionTable);
            tablepartitionTable.Columns.Add("day", dayColumn);
            var maxnotincludegroupidColumn = new Column("maxnotincludegroupid", "bigint", tablepartitionTable);
            tablepartitionTable.Columns.Add("maxnotincludegroupid", maxnotincludegroupidColumn);
            var maxnotincludeidColumn = new Column("maxnotincludeid", "bigint", tablepartitionTable);
            tablepartitionTable.Columns.Add("maxnotincludeid", maxnotincludeidColumn);
            var mingroupidColumn = new Column("mingroupid", "bigint", tablepartitionTable);
            tablepartitionTable.Columns.Add("mingroupid", mingroupidColumn);
            var minidColumn = new Column("minid", "bigint", tablepartitionTable);
            tablepartitionTable.Columns.Add("minid", minidColumn);
            var partitionnameColumn = new Column("partitionname", "character varying", tablepartitionTable);
            tablepartitionTable.Columns.Add("partitionname", partitionnameColumn);
            var tablenameColumn = new Column("tablename", "character varying", tablepartitionTable);
            tablepartitionTable.Columns.Add("tablename", tablenameColumn);
            var pK_tablepartition = new UniqueConstraint("PK_tablepartition", tablepartitionTable, new[] { idColumn3 });
            tablepartitionTable.PrimaryKey = pK_tablepartition;
            var pK_tablepartitionUc = RelationalModel.GetKey(this,
                "ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdTablePartition",
                new[] { "Id" });
            pK_tablepartition.MappedKeys.Add(pK_tablepartitionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_tablepartitionUc).Add(pK_tablepartition);
            tablepartitionTable.UniqueConstraints.Add("PK_tablepartition", pK_tablepartition);
            relationalModel.Tables.Add(("tablepartition", null), tablepartitionTable);
            var tablepartitionTableMapping = new TableMapping(pdTablePartition, tablepartitionTable, true);
            tablepartitionTable.AddTypeMapping(tablepartitionTableMapping, false);
            tableMappings3.Add(tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, pdTablePartition.FindProperty("Id")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(createdateColumn2, pdTablePartition.FindProperty("Createdate")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(dayColumn, pdTablePartition.FindProperty("Day")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(maxnotincludegroupidColumn, pdTablePartition.FindProperty("Maxnotincludegroupid")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(maxnotincludeidColumn, pdTablePartition.FindProperty("Maxnotincludeid")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(mingroupidColumn, pdTablePartition.FindProperty("Mingroupid")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(minidColumn, pdTablePartition.FindProperty("Minid")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(partitionnameColumn, pdTablePartition.FindProperty("Partitionname")!, tablepartitionTableMapping);
            RelationalModel.CreateColumnMapping(tablenameColumn, pdTablePartition.FindProperty("Tablename")!, tablepartitionTableMapping);

            var systemsetting = FindEntityType("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Systemsetting")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            systemsetting.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase = new TableBase("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Systemsetting", null, relationalModel);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "uuid", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase.Columns.Add("id", idColumnBase4);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(1024)", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase.Columns.Add("name", nameColumnBase1);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "text", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Systemsetting", shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase);
            var shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingMappingBase = new TableMappingBase<ColumnMappingBase>(systemsetting, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase, true);
            shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingTableBase.AddTypeMapping(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingMappingBase, false);
            defaultTableMappings4.Add(shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, systemsetting.FindProperty("Id")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, systemsetting.FindProperty("Name")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, systemsetting.FindProperty("Value")!, shtrihMDemoServerProcessingDataAccessPostgreSqlEfModelsSystemsettingMappingBase);

            var tableMappings4 = new List<TableMapping>();
            systemsetting.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var systemsettingTable = new Table("systemsetting", null, relationalModel);
            var idColumn4 = new Column("id", "uuid", systemsettingTable);
            systemsettingTable.Columns.Add("id", idColumn4);
            var nameColumn1 = new Column("name", "character varying(1024)", systemsettingTable);
            systemsettingTable.Columns.Add("name", nameColumn1);
            var valueColumn = new Column("value", "text", systemsettingTable);
            systemsettingTable.Columns.Add("value", valueColumn);
            var pK_systemsetting = new UniqueConstraint("PK_systemsetting", systemsettingTable, new[] { idColumn4 });
            systemsettingTable.PrimaryKey = pK_systemsetting;
            var pK_systemsettingUc = RelationalModel.GetKey(this,
                "ShtrihM.DemoServer.Processing.DataAccess.PostgreSql.EfModels.Systemsetting",
                new[] { "Id" });
            pK_systemsetting.MappedKeys.Add(pK_systemsettingUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_systemsettingUc).Add(pK_systemsetting);
            systemsettingTable.UniqueConstraints.Add("PK_systemsetting", pK_systemsetting);
            relationalModel.Tables.Add(("systemsetting", null), systemsettingTable);
            var systemsettingTableMapping = new TableMapping(systemsetting, systemsettingTable, true);
            systemsettingTable.AddTypeMapping(systemsettingTableMapping, false);
            tableMappings4.Add(systemsettingTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, systemsetting.FindProperty("Id")!, systemsettingTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, systemsetting.FindProperty("Name")!, systemsettingTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, systemsetting.FindProperty("Value")!, systemsettingTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
