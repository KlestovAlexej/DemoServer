// <auto-generated />
using System;
using System.Reflection;
using Acme.DemoServer.Processing.DataAccess.PostgreSql.EfModels;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Acme.DemoServer.Processing.DataAccess.PostgreSql.EfModelsOptimized
{
    [EntityFrameworkInternal]
    public partial class PdTablePartitionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Acme.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdTablePartition",
                typeof(PdTablePartition),
                baseEntityType,
                propertyCount: 9,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(PdTablePartition).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");

            var createdate = runtimeEntityType.AddProperty(
                "Createdate",
                typeof(DateTime),
                propertyInfo: typeof(PdTablePartition).GetProperty("Createdate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Createdate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            createdate.AddAnnotation("Relational:ColumnName", "createdate");

            var day = runtimeEntityType.AddProperty(
                "Day",
                typeof(DateOnly),
                propertyInfo: typeof(PdTablePartition).GetProperty("Day", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Day>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateOnly(1, 1, 1));
            day.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            day.AddAnnotation("Relational:ColumnName", "day");

            var maxnotincludegroupid = runtimeEntityType.AddProperty(
                "Maxnotincludegroupid",
                typeof(long),
                propertyInfo: typeof(PdTablePartition).GetProperty("Maxnotincludegroupid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Maxnotincludegroupid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            maxnotincludegroupid.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            maxnotincludegroupid.AddAnnotation("Relational:ColumnName", "maxnotincludegroupid");

            var maxnotincludeid = runtimeEntityType.AddProperty(
                "Maxnotincludeid",
                typeof(long),
                propertyInfo: typeof(PdTablePartition).GetProperty("Maxnotincludeid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Maxnotincludeid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            maxnotincludeid.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            maxnotincludeid.AddAnnotation("Relational:ColumnName", "maxnotincludeid");

            var mingroupid = runtimeEntityType.AddProperty(
                "Mingroupid",
                typeof(long),
                propertyInfo: typeof(PdTablePartition).GetProperty("Mingroupid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Mingroupid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            mingroupid.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            mingroupid.AddAnnotation("Relational:ColumnName", "mingroupid");

            var minid = runtimeEntityType.AddProperty(
                "Minid",
                typeof(long),
                propertyInfo: typeof(PdTablePartition).GetProperty("Minid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Minid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            minid.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            minid.AddAnnotation("Relational:ColumnName", "minid");

            var partitionname = runtimeEntityType.AddProperty(
                "Partitionname",
                typeof(string),
                propertyInfo: typeof(PdTablePartition).GetProperty("Partitionname", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Partitionname>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            partitionname.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            partitionname.AddAnnotation("Relational:ColumnName", "partitionname");
            partitionname.AddAnnotation("Relational:ColumnType", "character varying");

            var tablename = runtimeEntityType.AddProperty(
                "Tablename",
                typeof(string),
                propertyInfo: typeof(PdTablePartition).GetProperty("Tablename", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdTablePartition).GetField("<Tablename>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            tablename.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            tablename.AddAnnotation("Relational:ColumnName", "tablename");
            tablename.AddAnnotation("Relational:ColumnType", "character varying");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "tablepartition");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
