// <auto-generated />
using System;
using System.Reflection;
using Acme.DemoServer.Processing.DataAccess.PostgreSql.EfModels;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Acme.DemoServer.Processing.DataAccess.PostgreSql.EfModelsOptimized
{
    [EntityFrameworkInternal]
    public partial class PdDemoDelayTaskEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Acme.DemoServer.Processing.DataAccess.PostgreSql.EfModels.PdDemoDelayTask",
                typeof(PdDemoDelayTask),
                baseEntityType,
                propertyCount: 8,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");

            var available = runtimeEntityType.AddProperty(
                "Available",
                typeof(bool),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Available", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Available>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            available.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            available.AddAnnotation("Relational:ColumnName", "available");

            var createdate = runtimeEntityType.AddProperty(
                "Createdate",
                typeof(DateTime),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Createdate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Createdate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            createdate.AddAnnotation("Relational:ColumnName", "createdate");

            var modificationdate = runtimeEntityType.AddProperty(
                "Modificationdate",
                typeof(DateTime),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Modificationdate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Modificationdate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            modificationdate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            modificationdate.AddAnnotation("Relational:ColumnName", "modificationdate");

            var revision = runtimeEntityType.AddProperty(
                "Revision",
                typeof(long),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Revision", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Revision>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            revision.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            revision.AddAnnotation("Relational:ColumnName", "revision");

            var scenario = runtimeEntityType.AddProperty(
                "Scenario",
                typeof(string),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Scenario", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Scenario>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            scenario.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            scenario.AddAnnotation("Relational:ColumnName", "scenario");

            var scenariostate = runtimeEntityType.AddProperty(
                "Scenariostate",
                typeof(string),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Scenariostate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Scenariostate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            scenariostate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            scenariostate.AddAnnotation("Relational:ColumnName", "scenariostate");

            var startdate = runtimeEntityType.AddProperty(
                "Startdate",
                typeof(DateTime?),
                propertyInfo: typeof(PdDemoDelayTask).GetProperty("Startdate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PdDemoDelayTask).GetField("<Startdate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            startdate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            startdate.AddAnnotation("Relational:ColumnName", "startdate");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "demodelaytask");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
